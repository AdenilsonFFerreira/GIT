uses array, listas;

dec intervalo : num # num -> list num;
--- intervalo (m, n) <= if m > n then [] else m :: intervalo (m + 1, n);

dec mult2 : list num -> list num;
--- mult2 [] <= [];
--- mult2 (x :: xs) <= x * 2 :: mult2 xs;

dec duplique : list num -> list num;
--- duplique [] <= [];
--- duplique (x :: xs) <= x :: x :: duplique xs;

dec somalista : list num -> num;
--- somalista [] <= error ("Lista Vazia");
--- somalista (x :: xs) <= x + somalista xs;

dec inverte : list alpha -> list alpha;
--- inverte [] <= [];
--- inverte (x :: xs) <= inverte xs <> [x];

dec invert' : list num -> list num;
--- invert' [] <= [];
--- invert' xs <= ultimo xs :: invert' (arranjo xs);


dec poe_final : num # list num -> list num;
--- poe_final (n, []) <= [n];
--- poe_final (n, x :: xs) <= x :: poe_final (n, xs);

dec mult3 : list num -> num;
--- mult3 [] <= 1;
--- mult3 (x :: xs) <= x * mult3 xs;