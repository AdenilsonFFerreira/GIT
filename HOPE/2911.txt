ciclo : list num -> lis num;
ciclo ([])     <= [];
ciclo xs <= last xs :: init xs;

mescla : list num # list num -> list num;
mescla ([], ys) <= ys;
mescla (xs, []) <= xs;
mescla (x :: xs, y :: ys) <= if x =< y
	then x :: mescla (xs, y :: ys)
	else y :: mescla (x :: xs, ys);

replicar: num # alpha -> list alpha;
replicar (0, I_) <= [];
replicar (n,x) <= x :: replicar (n-1, x);

multiplicadores: list num # num -> list num;
multiplicadores ([], n) <= n;
multiplicadores (x::xs, n) <= if n mod x = 0
	then x :: multiplicadores (xs, n)
	else multiplicadores (xs, n);

digitos : num -> list num;
digitos n <= if n < 10
	then [n]
	else n mod 10 :: digitos' (n div 10);
OU
digitos : num -> list num;
digitos n <= reverse (digitos' n);

somaDigitos: num -> num;
somaDigitos n <= if n< 10
	then n
	else n mod 10 + somaDigitos (n div 10);

listaNumero: list num -> num;
listaNumero ([x]) <= x;
listaNumero [x :: xs] <= x + 10 * listaNumero' xs;
OU
listaNumero: list num # num;
listaNumero xs <= listaNumero' (reverse xs);

primeiroDigito: num -> num;
primeiroDigito n <= if  n < 10 
	then n
	else primeiroDigito (n div 10);

substitimpar: list num -> list num;
substitimpar ([x :: xs]) <= if x mod 2 = 0
		then x :: xs
		else x=1;
OU
substitimpar: list num -> list num;
substitimpar [] <= [];
substitimpar (x :: xs) <= if odd x
	then (x+1) :: substitimpar xs
	else x :: substitimpar xs;

sumll: list (Ã§ist num) -> num;
sumll [] <= 0;
sumll (x::xss) <= sum xs + sumll xss;

apagaOcorss: alpha # list num -> list num;
apagaOcorss ( ,xs) <= [];
apagaOcorss













