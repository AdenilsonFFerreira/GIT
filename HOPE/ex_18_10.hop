uses base2;
dec inverte : list num -> list num;
dec divisores : num -> list num;
dec produtolst : list num -> num;
dec faixa_primos : num # num -> list num;
dec multlstn : num # list num -> list num;
dec tabuada : num -> list num;
dec somalst : list num -> num;
dec amigos : num # num -> truval;
dec abundante : num -> truval;
dec div84 : num -> truval;
dec div84' : num -> truval;
dec multip_faixa : num # num -> num;
dec deficiente : num -> truval;
dec perfeito : num -> truval;
dec primeiros_enquanto : (num -> truval) # list num -> list num;
dec suspende_enquanto : (num -> truval) # list num -> list num;
dec primeiros : num # list num -> list num;
dec itera : (num -> truval) # num -> list num;
dec itera' : (num -> num) # num -> list num;

--- inverte [] <= [];
--- inverte (x :: xs) <= inverte xs <> [x];

--- divisores 0 <= [];
--- divisores n <= inverte (comp (faixa (1, n + 1, 1), lambda x => multiplo (n, x)));

--- produtolst [] <= 0;
--- produtolst ([x]) <= x;
--- produtolst (x :: xs) <= x * produtolst xs;

--- faixa_primos (0, 0) <= [];
--- faixa_primos (n, m) <= comp (faixa (n, m, 1), lambda x => checa_primo x);

--- multlstn (x, []) <= [];
--- multlstn (x, n :: ns) <= x * n :: multlstn (x, ns);

--- tabuada n <= multlstn (n, faixa (1, 10, 1));

--- somalst [] <= 0;
--- somalst (x :: xs) <= x + somalst xs;

--- amigos (x, y) <= somalst (divisores x) - x = y and somalst (divisores y) - y = x;

--- abundante n <= somalst (comp (faixa (1, n + 1, 1), lambda x => multiplo (n, x))) - n > n;

--- div84 n <= if n mod 8 = 4 then true else false;

--- div84' n <= n mod 8 = 4;

--- multip_faixa (x, y) <= if x > y then 0 else if x = y then y else x * multip_faixa (x + 1, y);

--- deficiente n <= somalst (comp (faixa (1, n + 1, 1), lambda x => multiplo (n, x))) - n < n;

--- perfeito n <= somalst (comp (faixa (1, n + 1, 1), lambda x => multiplo (n, x))) - n = n;

--- primeiros_enquanto (funcao, []) <= [];
--- primeiros_enquanto (funcao, x :: xs) <= if funcao x then x :: primeiros_enquanto (funcao, xs) else [];

--- suspende_enquanto (funcao, []) <= [];
--- suspende_enquanto (funcao, x :: xs) <= if funcao x then suspende_enquanto (funcao, xs) else x :: xs;

--- primeiros (0, _) <= [];
--- primeiros (_, []) <= [];
--- primeiros (n, x :: xs) <= x :: primeiros (n - 1, xs);

--- itera' (x, n) <= n :: itera' (x, x n);
