uses listas, array, recursao;

dec faixa : num # num # num -> list num;
--- faixa (i, f, p) <= if i > f then [] else i :: faixa (i + p, f, p);

dec comp : list num # (num -> truval) -> list num;
--- comp ([], qualificador) <= [];
--- comp (x :: xs, qualificador) <= if qualificador x then x :: comp (xs, qualificador) else comp (xs, qualificador);

//Função anônima.
comp ([1,2,3,4], \ x => x mod 2 = 0);
comp(faixa(1,7,1), \ x => par (x)); //Outro exemplo. 


dec listapot : num # list num -> list num;
--- listapot (n, []) <= [];
--- listapot (n, x :: xs) <= pow (x, n) :: listapot (n, xs);




dec listapot : num # list num -> list num;
--- listapot (n, []) <= [];
--- listapot (n, x :: xs) <= pow (x, n) :: listapot (n, xs);
