 dec lt : num -> list num;
dec lst : num -> list num;
dec cabeca : list num -> num;
dec cauda : list num -> num;
dec cauda2 : list num -> list num;
dec ultimo : list num -> num;
dec arranjo : list num -> list num;

--- lst 0 <= [];
--- lst n <= n :: lst (n - 1);

--- cabeca [] <= error ("Lista vazia");
--- cabeca (x :: xs) <= x;

--- cauda [] <= error ("Lista Vazia");

--- cauda2 [] <= error ("Lista Vazia");
--- cauda2 x <= [];
--- cauda2 (x :: xs) <= xs;

--- ultimo [] <= error ("Lista vazia");
--- ultimo ([x]) <= x;
--- ultimo (x :: xs) <= ultimo xs;

--- arranjo [] <= error ("Lista vazia");
--- arranjo ([x]) <= [];
--- arranjo (x :: xs) <= x :: arranjo xs;
