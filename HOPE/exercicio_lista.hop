uses listas;
dec somalst : list num -> num;
dec mult2 : list num -> list num;
dec duplique : list num -> list num;
dec intervalo : list num -> list num;
dec intervalo2 : num # num -> list num;
dec inverte : list num -> list num;
dec inverte' : list num -> list num;
dec poe_final : num # list num;
dec poe_final2 : num # list num -> list num;
dec poe_finalCerto : num # list num -> list num;
dec mult : list num -> list num;
dec mult3 : list num -> num;
dec invertBas : list num # list num -> list num;
dec inverte'' : list num -> list num;

--- somalst [] <= 0;
--- somalst (x :: xs) <= x + somalst xs;

--- mult2 [] <= [];
--- mult2 (x :: xs) <= x * 2 :: mult2 xs;

--- duplique [] <= [];
--- duplique (x :: xs) <= x :: duplique xs;
--- duplique (x :: xs) <= x :: x :: duplique xs;

--- intervalo2 (m, n) <= if m > n then [] else m :: intervalo2 (m + 1, n);

--- inverte [] <= [];
--- inverte (x :: xs) <= inverte xs <> [x];

--- inverte' [] <= [];
--- inverte' xs <= ultimo xs :: inverte' (arranjo xs);

--- poe_final2 (n, []) <= [];

--- poe_finalCerto (n, []) <= [n];
--- poe_finalCerto (n, x :: xs) <= x :: poe_finalCerto (n, xs);

--- mult [] <= [];

--- mult3 [] <= 1;
--- mult3 (x :: xs) <= x * mult3 xs;

--- invertBas ([], ys) <= ys;
--- invertBas (x :: xs, ys) <= invertBas (xs, x :: ys);

--- inverte'' xs <= invertBas (xs, []);
