somalst : list num -> num;
somalst ([]) <= 0;
somalst (x::xs) <= x+somalst xs;

abundante: num -> truval;
abundante n <=
	somalst (comp (faixa (1, n+1, 1),
	\x => multiplo (n, x))) -n > n;

labundante : num -> list num;
labundante n <=
	filtro (faixa (1, n, 1), \x => abundante x);

soma_impares : num -> num;
soma_impares n <=
	reducao (filtro (faixa (1, n, 1), \x => impar x), soma, 0);

quadrados : num # num -> list num;
quadrados (n,m) <=
	mapa (comp (faixa (n, m, 1), \x => impar (x)), \x => pow (x,2));

perfeito2 : num -> truval;
perfeito2 0 <= false
perfeito2 n <= 
	n = recucao (comp (faixa (1, n-1, 1), \x => multiplo (n, x)), soma,0);

sorted : list num -> truval;
sorted [] <= true;
sorted [x] <= true;
sorted (x :: y :: xs) <= x =< y and sorted (y :: xs);

