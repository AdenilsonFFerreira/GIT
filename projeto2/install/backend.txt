criar duas pasta na do projeto
backend e frontend

com comando ir ate a pasta de backend e executar os comandos
npm init -y
npm install express mongoose cors jsonwebtoken bcryptjs

Crie um arquivo chamado server.js dentro da pasta backend e adicione o seguinte conteúdo:
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');

const app = express();
app.use(express.json());
app.use(cors());

mongoose.connect('mongodb://localhost:27017/minha-aplicacao', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

app.listen(5000, () => {
  console.log('Servidor rodando na porta 5000');
});

Crie uma pasta chamada models dentro da pasta backend:
const mongoose = require('mongoose');

const UserSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  password: { type: String, required: true },
});

module.exports = mongoose.model('User', UserSchema);

Crie uma pasta chamada routes dentro da pasta backend:
const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

const router = express.Router();

router.post('/register', async (req, res) => {
  const { username, password } = req.body;
  const hashedPassword = await bcrypt.hash(password, 10);

  const user = new User({ username, password: hashedPassword });
  await user.save();

  res.status(201).send('Usuário registrado com sucesso');
});

router.post('/login', async (req, res) => {
  const { username, password } = req.body;
  const user = await User.findOne({ username });

  if (!user || !await bcrypt.compare(password, user.password)) {
    return res.status(401).send('Credenciais inválidas');
  }

  const token = jwt.sign({ id: user._id }, 'seu-segredo', { expiresIn: '1h' });

  res.json({ token });
});

module.exports = router;

No arquivo server.js, adicione a seguinte linha para utilizar as rotas:
app.use('/api/auth', require('./routes/auth'));



